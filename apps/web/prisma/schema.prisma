// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workflow {
  id            String    @id @default(cuid())
  userId        String
  name          String
  description   String?
  status        String
  lastRunAt     DateTime?
  lastRunStatus String?
  lastRunId     String?

  definition String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  //use can not have multiple workflows with the same definition
  // @@unique([userId, definition])
  executions WorkflowExecution[]

  //use can not have multiple workflows with the same name
  @@unique([userId, name])
}

model WorkflowExecution {
  id              String           @id @default(cuid())
  workflowId      String
  userId          String
  status          String
  trigger         String
  createdAt       DateTime         @default(now())
  startedAt       DateTime?
  finishedAt      DateTime?
  creditsConsumed Int?             @default(0)
  definition      String           @default("{}")
  phases          ExecutionPhase[]
  workflow        Workflow         @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model ExecutionPhase {
  id                  String            @id @default(cuid())
  userId              String
  number              Int
  node                String
  name                String
  workflowExecutionId String
  status              String
  createdAt           DateTime          @default(now())
  startedAt           DateTime?
  finishedAt          DateTime?
  inputs              String?
  outputs             String?
  creditsConsumed     Int?
  execution           WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)

  logs               ExecutionLog[]
}

model ExecutionLog {
  id               String   @id @default(cuid())
  executionPhaseId String
  message          String
  timestamp        DateTime @default(now())
  logLevel         String
  executionPhase ExecutionPhase @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)
}
